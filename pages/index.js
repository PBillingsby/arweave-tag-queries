import Head from 'next/head'
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css'
import Image from 'next/image'
import Arweave from 'arweave';

export default function Home() {
  const [selectedFile, setSelectedFile] = useState();
  const [img, setImg] = useState();
  const [message, setMessage] = useState({});
  const [currentWallet, setCurrentWallet] = useState();
  const [gifs, setGifs] = useState();

  const arweave = Arweave.init({
    host: 'arweave.net',
    port: 443,
    protocol: 'https',
    timeout: 3000000
  });

  const getGifs = async (wallet) => {
    const queryWallet = wallet !== undefined ? wallet : currentWallet;
    const gifs = await arweave.api.post('graphql',
      {
        query: `query {
          transactions(
            owners: ["${queryWallet}"]
            tags: [{
                name: "App-Name",
                values: ["PbillingsbyGifs"]
              },
              {
                name: "Content-Type",
                values: ["image/gif"]
              }]
          ) {
            edges {
                node {
                id
                    tags {
                  name
                  value
                }
                data {
                  size
                  type
                }
              }
            }
          }
        }`})
    setGifs(gifs.data.data.transactions.edges)
  }

  const fetchWallet = async () => {
    const permissions = await window.arweaveWallet.getPermissions()
    if (permissions.length) {
      const wallet = await window.arweaveWallet.getActiveAddress();
      setCurrentWallet(wallet);
    }
  }

  useEffect(() => {
    fetchWallet()
      .catch(console.error);

    getGifs(currentWallet);
  }, [currentWallet])

  const connect = async () => {
    await arweaveWallet.connect('ACCESS_ADDRESS');
    setMessage({
      message: '...connecting',
      color: 'yellow'
    })

    const wallet = await arweaveWallet.getActiveAddress();

    setCurrentWallet(wallet);
    getGifs(wallet);
    setMessage({})
  }

  const disconnect = async () => {
    await arweaveWallet.disconnect();
    window.location.reload();
  }

  const handleFileChange = (e) => {
    const reader = new FileReader();
    const file = e.target.files[0];

    if (file.type !== 'image/gif') {
      setMessage({ message: "File must be a gif", color: "red" });
      return;
    }

    if (file) {
      setMessage({})
      reader.onloadend = () => {
        if (reader.result) {
          setSelectedFile(Buffer.from(reader.result));
        }
      };
      reader.readAsArrayBuffer(file);
      const objectUrl = URL.createObjectURL(file);
      setImg(objectUrl);
    }

  }

  const uploadGif = async () => {
    try {
      const tx = await arweave.createTransaction({
        data: selectedFile
      }, 'use_wallet');

      tx.addTag("Content-Type", "image/gif");
      tx.addTag("App-Name", "PbillingsbyGifs");

      await arweave.transactions.sign(tx, 'use_wallet');
      setMessage({
        message: 'Uploading to Arweave.',
        color: 'yellow'
      })

      const res = await arweave.transactions.post(tx);

      setMessage({
        message: 'Upload successful. Gif available after confirmation.',
        color: 'green'
      })
      getGifs()
    }
    catch (message) {
      console.log('message with upload: ', message);
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>YourGifs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        {currentWallet ?
          <div>
            <p>Owner: {currentWallet}</p>
            <button onClick={disconnect}>Disconnect</button>
          </div> :
          <button onClick={connect}>Connect to view uploaded gifs</button>

        }
        <div style={{ maxWidth: '25rem', margin: '0 auto', height: '20rem' }} className="main">
          <input type="file" onChange={handleFileChange} />
          <div>
            {message && <p style={{ color: message.color }}>{message.message}</p>}
            {img &&
              <div>
                {selectedFile && (
                  <span>
                    <Image src={img} width={250} height={250} alt="local preview" />
                    <button onClick={() => uploadGif(selectedFile)}>Upload GIF</button>
                  </span>
                )
                }
              </div>
            }
          </div>
        </div>
        <div>
          <h1 style={{ textAlign: 'center' }}>YourGifs</h1>
          <div style={{ display: 'flex', overflow: 'scroll', maxWidth: '50vw', margin: '0 auto', border: '1px solid #eee' }}>
            <button onClick={() => getGifs()}>Refresh GIF's</button>
            {gifs && gifs.map(gif => {
              return <div key={gif.node.id} style={{ margin: '2rem' }}>
                <a href={`https://arweave.net/${gif.node.id}`} target="_blank">
                  <img src={`https://arweave.net/${gif.node.id}`} style={{ maxWidth: '10rem' }} />
                </a>
              </div>
            })}
          </div>
        </div>
      </div>

      <footer className={styles.footer}>

      </footer>
    </div >
  )
}
